{"/home/travis/build/npmtest/node-npmtest-ava/test.js":"/* istanbul instrument in package npmtest_ava */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ava/lib.npmtest_ava.js":"/* istanbul instrument in package npmtest_ava */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ava = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ava = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ava/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ava && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ava */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ava\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ava.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_ava.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ava.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_ava.__dirname +\n                    '/lib.npmtest_ava.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ava/ava/index.js":"'use strict';\n\n// Ensure the same AVA install is loaded by the test file as by the test worker\nif (process.env.AVA_PATH && process.env.AVA_PATH !== __dirname) {\n\tmodule.exports = require(process.env.AVA_PATH); // eslint-disable-line import/no-dynamic-require\n} else {\n\tmodule.exports = require('./lib/main');\n}\n","/home/travis/build/npmtest/node-npmtest-ava/ava/lib/main.js":"'use strict';\nconst worker = require('./test-worker');\nconst adapter = require('./process-adapter');\nconst serializeError = require('./serialize-error');\nconst globals = require('./globals');\nconst Runner = require('./runner');\n\nconst opts = globals.options;\nconst runner = new Runner({\n\tbail: opts.failFast,\n\tfailWithoutAssertions: opts.failWithoutAssertions,\n\tfile: opts.file,\n\tmatch: opts.match,\n\tserial: opts.serial,\n\tupdateSnapshots: opts.updateSnapshots\n});\n\nworker.setRunner(runner);\n\n// If fail-fast is enabled, use this variable to detect\n// that no more tests should be logged\nlet isFailed = false;\n\nError.stackTraceLimit = Infinity;\n\nfunction test(props) {\n\tif (isFailed) {\n\t\treturn;\n\t}\n\n\tconst hasError = typeof props.error !== 'undefined';\n\n\t// Don't display anything if it's a passed hook\n\tif (!hasError && props.type !== 'test') {\n\t\treturn;\n\t}\n\n\tif (hasError) {\n\t\tprops.error = serializeError(props.error);\n\t} else {\n\t\tprops.error = null;\n\t}\n\n\tadapter.send('test', props);\n\n\tif (hasError && opts.failFast) {\n\t\tisFailed = true;\n\t\texit();\n\t}\n}\n\nfunction exit() {\n\t// Reference the IPC channel now that tests have finished running.\n\tadapter.ipcChannel.ref();\n\n\tconst stats = runner.buildStats();\n\tadapter.send('results', {stats});\n}\n\nglobals.setImmediate(() => {\n\tconst hasExclusive = runner.tests.hasExclusive;\n\tconst numberOfTests = runner.tests.testCount;\n\n\tif (numberOfTests === 0) {\n\t\tadapter.send('no-tests', {avaRequired: true});\n\t\treturn;\n\t}\n\n\tadapter.send('stats', {\n\t\ttestCount: numberOfTests,\n\t\thasExclusive\n\t});\n\n\trunner.on('test', test);\n\n\tprocess.on('ava-run', options => {\n\t\t// Unreference the IPC channel. This stops it from keeping the event loop\n\t\t// busy, which means the `beforeExit` event can be used to detect when tests\n\t\t// stall.\n\t\tadapter.ipcChannel.unref();\n\n\t\trunner.run(options)\n\t\t\t.then(() => {\n\t\t\t\trunner.saveSnapshotState();\n\n\t\t\t\treturn exit();\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tprocess.emit('uncaughtException', err);\n\t\t\t});\n\t});\n\n\tprocess.on('ava-init-exit', () => {\n\t\texit();\n\t});\n});\n\nmodule.exports = runner.chain;\n\n// TypeScript imports the `default` property for\n// an ES2015 default import (`import test from 'ava'`)\n// See: https://github.com/Microsoft/TypeScript/issues/2242#issuecomment-83694181\nmodule.exports.default = runner.chain;\n","/home/travis/build/npmtest/node-npmtest-ava/ava/lib/test-worker.js":"'use strict';\n\n// Check if the test is being run without AVA cli\n{\n\t/* eslint-disable import/order */\n\tconst path = require('path');\n\tconst chalk = require('chalk');\n\n\tconst isForked = typeof process.send === 'function';\n\tif (!isForked) {\n\t\tconst fp = path.relative('.', process.argv[1]);\n\n\t\tconsole.log();\n\t\tconsole.error('Test files must be run with the AVA CLI:\\n\\n    ' + chalk.grey.dim('$') + ' ' + chalk.cyan('ava ' + fp) + '\\n');\n\n\t\tprocess.exit(1); // eslint-disable-line unicorn/no-process-exit\n\t}\n}\n\n/* eslint-enable import/order */\nconst Bluebird = require('bluebird');\nconst currentlyUnhandled = require('currently-unhandled')();\nconst isObj = require('is-obj');\nconst adapter = require('./process-adapter');\nconst globals = require('./globals');\nconst serializeError = require('./serialize-error');\n\nconst opts = adapter.opts;\nconst testPath = opts.file;\nglobals.options = opts;\n\n// Bluebird specific\nBluebird.longStackTraces();\n\n(opts.require || []).forEach(require);\n\nadapter.installSourceMapSupport();\nadapter.installPrecompilerHook();\n\nconst dependencies = [];\nadapter.installDependencyTracking(dependencies, testPath);\n\n// Set when main.js is required (since test files should have `require('ava')`).\nlet runner = null;\nexports.setRunner = newRunner => {\n\trunner = newRunner;\n};\n\nrequire(testPath); // eslint-disable-line import/no-dynamic-require\n\n// If AVA was not required, show an error\nif (!runner) {\n\tadapter.send('no-tests', {avaRequired: false});\n}\n\nfunction attributeLeakedError(err) {\n\tif (!runner) {\n\t\treturn false;\n\t}\n\n\treturn runner.attributeLeakedError(err);\n}\n\nconst attributedRejections = new Set();\nprocess.on('unhandledRejection', (reason, promise) => {\n\tif (attributeLeakedError(reason)) {\n\t\tattributedRejections.add(promise);\n\t}\n});\n\nprocess.on('uncaughtException', exception => {\n\tif (attributeLeakedError(exception)) {\n\t\treturn;\n\t}\n\n\tlet serialized;\n\ttry {\n\t\tserialized = serializeError(exception);\n\t} catch (ignore) { // eslint-disable-line unicorn/catch-error-name\n\t\t// Avoid using serializeError\n\t\tconst err = new Error('Failed to serialize uncaught exception');\n\t\tserialized = {\n\t\t\tavaAssertionError: false,\n\t\t\tname: err.name,\n\t\t\tmessage: err.message,\n\t\t\tstack: err.stack\n\t\t};\n\t}\n\n\t// Ensure the IPC channel is refereced. The uncaught exception will kick off\n\t// the teardown sequence, for which the messages must be received.\n\tadapter.ipcChannel.ref();\n\n\tadapter.send('uncaughtException', {exception: serialized});\n});\n\nlet tearingDown = false;\nprocess.on('ava-teardown', () => {\n\t// AVA-teardown can be sent more than once\n\tif (tearingDown) {\n\t\treturn;\n\t}\n\ttearingDown = true;\n\n\tlet rejections = currentlyUnhandled()\n\t\t.filter(rejection => !attributedRejections.has(rejection.promise));\n\n\tif (rejections.length > 0) {\n\t\trejections = rejections.map(rejection => {\n\t\t\tlet reason = rejection.reason;\n\t\t\tif (!isObj(reason) || typeof reason.message !== 'string') {\n\t\t\t\treason = {\n\t\t\t\t\tmessage: String(reason)\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn serializeError(reason);\n\t\t});\n\n\t\tadapter.send('unhandledRejections', {rejections});\n\t}\n\n\t// Include dependencies in the final teardown message. This ensures the full\n\t// set of dependencies is included no matter how the process exits, unless\n\t// it flat out crashes.\n\tadapter.send('teardown', {dependencies});\n});\n\nprocess.on('ava-exit', () => {\n\tprocess.exit(0); // eslint-disable-line xo/no-process-exit\n});\n","/home/travis/build/npmtest/node-npmtest-ava/ava/lib/process-adapter.js":"'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst debug = require('debug')('ava');\nconst sourceMapSupport = require('source-map-support');\nconst installPrecompiler = require('require-precompiled');\n\n// Parse and re-emit AVA messages\nprocess.on('message', message => {\n\tif (!message.ava) {\n\t\treturn;\n\t}\n\n\tprocess.emit(message.name, message.data);\n});\n\nexports.send = (name, data) => {\n\tprocess.send({\n\t\tname: `ava-${name}`,\n\t\tdata,\n\t\tava: true\n\t});\n};\n\n// `process.channel` was added in Node.js 7.1.0, but the channel was available\n// through an undocumented API as `process._channel`.\nexports.ipcChannel = process.channel || process._channel;\n\nconst opts = JSON.parse(process.argv[2]);\nexports.opts = opts;\n\n// Fake TTY support\nif (opts.tty) {\n\tprocess.stdout.isTTY = true;\n\tprocess.stdout.columns = opts.tty.columns || 80;\n\tprocess.stdout.rows = opts.tty.rows;\n\n\tconst tty = require('tty');\n\tconst isatty = tty.isatty;\n\n\ttty.isatty = function (fd) {\n\t\tif (fd === 1 || fd === process.stdout) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn isatty(fd);\n\t};\n}\n\nif (debug.enabled) {\n\t// Forward the `time-require` `--sorted` flag.\n\t// Intended for internal optimization tests only.\n\tif (opts._sorted) {\n\t\tprocess.argv.push('--sorted');\n\t}\n\n\trequire('time-require'); // eslint-disable-line import/no-unassigned-import\n}\n\nconst sourceMapCache = new Map();\nconst cacheDir = opts.cacheDir;\n\nexports.installSourceMapSupport = () => {\n\tsourceMapSupport.install({\n\t\tenvironment: 'node',\n\t\thandleUncaughtExceptions: false,\n\t\tretrieveSourceMap(source) {\n\t\t\tif (sourceMapCache.has(source)) {\n\t\t\t\treturn {\n\t\t\t\t\turl: source,\n\t\t\t\t\tmap: fs.readFileSync(sourceMapCache.get(source), 'utf8')\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n};\n\nexports.installPrecompilerHook = () => {\n\tinstallPrecompiler(filename => {\n\t\tconst precompiled = opts.precompiled[filename];\n\n\t\tif (precompiled) {\n\t\t\tsourceMapCache.set(filename, path.join(cacheDir, `${precompiled}.js.map`));\n\t\t\treturn fs.readFileSync(path.join(cacheDir, `${precompiled}.js`), 'utf8');\n\t\t}\n\n\t\treturn null;\n\t});\n};\n\nexports.installDependencyTracking = (dependencies, testPath) => {\n\tObject.keys(require.extensions).forEach(ext => {\n\t\tconst wrappedHandler = require.extensions[ext];\n\n\t\trequire.extensions[ext] = (module, filename) => {\n\t\t\tif (filename !== testPath) {\n\t\t\t\tdependencies.push(filename);\n\t\t\t}\n\n\t\t\twrappedHandler(module, filename);\n\t\t};\n\t});\n};\n"}